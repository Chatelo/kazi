generator client {
  provider = "prisma-client-js"
  output = "../../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String    @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  role           Role      @default(USER)

  accounts      Account[]
  sessions      Session[]
  savedJobs     SavedJob[]
  applications  JobApplication[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Job {
  id          String   @id @default(cuid())
  title       String
  company     String
  location    String
  description String
  salary      String?
  jobType     String
  postedAt    DateTime @default(now())
  url         String
  savedBy     SavedJob[]
  applications JobApplication[]
}

model SavedJob {
  id        String   @id @default(cuid())
  userId    String
  jobId     String
  savedAt   DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  job       Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@unique([userId, jobId])
}

model JobApplication {
  id        String   @id @default(cuid())
  userId    String
  jobId     String
  appliedAt DateTime @default(now())
  status    ApplicationStatus @default(PENDING)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  job       Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@unique([userId, jobId])
}

enum Role {
  USER
  ADMIN
}

enum ApplicationStatus {
  PENDING
  REVIEWED
  INTERVIEWED
  OFFERED
  REJECTED
}